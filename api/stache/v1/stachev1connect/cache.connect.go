// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: stache/v1/cache.proto

package stachev1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/byytelope/stache/api/stache/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// CacheServiceName is the fully-qualified name of the CacheService service.
	CacheServiceName = "stache.v1.CacheService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// CacheServiceSetProcedure is the fully-qualified name of the CacheService's Set RPC.
	CacheServiceSetProcedure = "/stache.v1.CacheService/Set"
	// CacheServiceGetProcedure is the fully-qualified name of the CacheService's Get RPC.
	CacheServiceGetProcedure = "/stache.v1.CacheService/Get"
	// CacheServiceDeleteProcedure is the fully-qualified name of the CacheService's Delete RPC.
	CacheServiceDeleteProcedure = "/stache.v1.CacheService/Delete"
	// CacheServiceListEntriesProcedure is the fully-qualified name of the CacheService's ListEntries
	// RPC.
	CacheServiceListEntriesProcedure = "/stache.v1.CacheService/ListEntries"
	// CacheServiceBatchGetProcedure is the fully-qualified name of the CacheService's BatchGet RPC.
	CacheServiceBatchGetProcedure = "/stache.v1.CacheService/BatchGet"
)

// CacheServiceClient is a client for the stache.v1.CacheService service.
type CacheServiceClient interface {
	Set(context.Context, *connect.Request[v1.SetRequest]) (*connect.Response[v1.SetResponse], error)
	Get(context.Context, *connect.Request[v1.GetRequest]) (*connect.Response[v1.GetResponse], error)
	Delete(context.Context, *connect.Request[v1.DeleteRequest]) (*connect.Response[v1.DeleteResponse], error)
	ListEntries(context.Context, *connect.Request[v1.ListEntriesRequest]) (*connect.Response[v1.ListEntriesResponse], error)
	BatchGet(context.Context, *connect.Request[v1.BatchGetRequest]) (*connect.Response[v1.BatchGetResponse], error)
}

// NewCacheServiceClient constructs a client for the stache.v1.CacheService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewCacheServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) CacheServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	cacheServiceMethods := v1.File_stache_v1_cache_proto.Services().ByName("CacheService").Methods()
	return &cacheServiceClient{
		set: connect.NewClient[v1.SetRequest, v1.SetResponse](
			httpClient,
			baseURL+CacheServiceSetProcedure,
			connect.WithSchema(cacheServiceMethods.ByName("Set")),
			connect.WithClientOptions(opts...),
		),
		get: connect.NewClient[v1.GetRequest, v1.GetResponse](
			httpClient,
			baseURL+CacheServiceGetProcedure,
			connect.WithSchema(cacheServiceMethods.ByName("Get")),
			connect.WithClientOptions(opts...),
		),
		delete: connect.NewClient[v1.DeleteRequest, v1.DeleteResponse](
			httpClient,
			baseURL+CacheServiceDeleteProcedure,
			connect.WithSchema(cacheServiceMethods.ByName("Delete")),
			connect.WithClientOptions(opts...),
		),
		listEntries: connect.NewClient[v1.ListEntriesRequest, v1.ListEntriesResponse](
			httpClient,
			baseURL+CacheServiceListEntriesProcedure,
			connect.WithSchema(cacheServiceMethods.ByName("ListEntries")),
			connect.WithClientOptions(opts...),
		),
		batchGet: connect.NewClient[v1.BatchGetRequest, v1.BatchGetResponse](
			httpClient,
			baseURL+CacheServiceBatchGetProcedure,
			connect.WithSchema(cacheServiceMethods.ByName("BatchGet")),
			connect.WithClientOptions(opts...),
		),
	}
}

// cacheServiceClient implements CacheServiceClient.
type cacheServiceClient struct {
	set         *connect.Client[v1.SetRequest, v1.SetResponse]
	get         *connect.Client[v1.GetRequest, v1.GetResponse]
	delete      *connect.Client[v1.DeleteRequest, v1.DeleteResponse]
	listEntries *connect.Client[v1.ListEntriesRequest, v1.ListEntriesResponse]
	batchGet    *connect.Client[v1.BatchGetRequest, v1.BatchGetResponse]
}

// Set calls stache.v1.CacheService.Set.
func (c *cacheServiceClient) Set(ctx context.Context, req *connect.Request[v1.SetRequest]) (*connect.Response[v1.SetResponse], error) {
	return c.set.CallUnary(ctx, req)
}

// Get calls stache.v1.CacheService.Get.
func (c *cacheServiceClient) Get(ctx context.Context, req *connect.Request[v1.GetRequest]) (*connect.Response[v1.GetResponse], error) {
	return c.get.CallUnary(ctx, req)
}

// Delete calls stache.v1.CacheService.Delete.
func (c *cacheServiceClient) Delete(ctx context.Context, req *connect.Request[v1.DeleteRequest]) (*connect.Response[v1.DeleteResponse], error) {
	return c.delete.CallUnary(ctx, req)
}

// ListEntries calls stache.v1.CacheService.ListEntries.
func (c *cacheServiceClient) ListEntries(ctx context.Context, req *connect.Request[v1.ListEntriesRequest]) (*connect.Response[v1.ListEntriesResponse], error) {
	return c.listEntries.CallUnary(ctx, req)
}

// BatchGet calls stache.v1.CacheService.BatchGet.
func (c *cacheServiceClient) BatchGet(ctx context.Context, req *connect.Request[v1.BatchGetRequest]) (*connect.Response[v1.BatchGetResponse], error) {
	return c.batchGet.CallUnary(ctx, req)
}

// CacheServiceHandler is an implementation of the stache.v1.CacheService service.
type CacheServiceHandler interface {
	Set(context.Context, *connect.Request[v1.SetRequest]) (*connect.Response[v1.SetResponse], error)
	Get(context.Context, *connect.Request[v1.GetRequest]) (*connect.Response[v1.GetResponse], error)
	Delete(context.Context, *connect.Request[v1.DeleteRequest]) (*connect.Response[v1.DeleteResponse], error)
	ListEntries(context.Context, *connect.Request[v1.ListEntriesRequest]) (*connect.Response[v1.ListEntriesResponse], error)
	BatchGet(context.Context, *connect.Request[v1.BatchGetRequest]) (*connect.Response[v1.BatchGetResponse], error)
}

// NewCacheServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewCacheServiceHandler(svc CacheServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	cacheServiceMethods := v1.File_stache_v1_cache_proto.Services().ByName("CacheService").Methods()
	cacheServiceSetHandler := connect.NewUnaryHandler(
		CacheServiceSetProcedure,
		svc.Set,
		connect.WithSchema(cacheServiceMethods.ByName("Set")),
		connect.WithHandlerOptions(opts...),
	)
	cacheServiceGetHandler := connect.NewUnaryHandler(
		CacheServiceGetProcedure,
		svc.Get,
		connect.WithSchema(cacheServiceMethods.ByName("Get")),
		connect.WithHandlerOptions(opts...),
	)
	cacheServiceDeleteHandler := connect.NewUnaryHandler(
		CacheServiceDeleteProcedure,
		svc.Delete,
		connect.WithSchema(cacheServiceMethods.ByName("Delete")),
		connect.WithHandlerOptions(opts...),
	)
	cacheServiceListEntriesHandler := connect.NewUnaryHandler(
		CacheServiceListEntriesProcedure,
		svc.ListEntries,
		connect.WithSchema(cacheServiceMethods.ByName("ListEntries")),
		connect.WithHandlerOptions(opts...),
	)
	cacheServiceBatchGetHandler := connect.NewUnaryHandler(
		CacheServiceBatchGetProcedure,
		svc.BatchGet,
		connect.WithSchema(cacheServiceMethods.ByName("BatchGet")),
		connect.WithHandlerOptions(opts...),
	)
	return "/stache.v1.CacheService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case CacheServiceSetProcedure:
			cacheServiceSetHandler.ServeHTTP(w, r)
		case CacheServiceGetProcedure:
			cacheServiceGetHandler.ServeHTTP(w, r)
		case CacheServiceDeleteProcedure:
			cacheServiceDeleteHandler.ServeHTTP(w, r)
		case CacheServiceListEntriesProcedure:
			cacheServiceListEntriesHandler.ServeHTTP(w, r)
		case CacheServiceBatchGetProcedure:
			cacheServiceBatchGetHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedCacheServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedCacheServiceHandler struct{}

func (UnimplementedCacheServiceHandler) Set(context.Context, *connect.Request[v1.SetRequest]) (*connect.Response[v1.SetResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("stache.v1.CacheService.Set is not implemented"))
}

func (UnimplementedCacheServiceHandler) Get(context.Context, *connect.Request[v1.GetRequest]) (*connect.Response[v1.GetResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("stache.v1.CacheService.Get is not implemented"))
}

func (UnimplementedCacheServiceHandler) Delete(context.Context, *connect.Request[v1.DeleteRequest]) (*connect.Response[v1.DeleteResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("stache.v1.CacheService.Delete is not implemented"))
}

func (UnimplementedCacheServiceHandler) ListEntries(context.Context, *connect.Request[v1.ListEntriesRequest]) (*connect.Response[v1.ListEntriesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("stache.v1.CacheService.ListEntries is not implemented"))
}

func (UnimplementedCacheServiceHandler) BatchGet(context.Context, *connect.Request[v1.BatchGetRequest]) (*connect.Response[v1.BatchGetResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("stache.v1.CacheService.BatchGet is not implemented"))
}
